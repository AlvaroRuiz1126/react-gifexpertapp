{"version":3,"sources":["Components/AddCategory.js","Components/GifGridItem.js","helpers/getGifs.js","Components/GifGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GifGridItem","id","title","url","console","log","className","src","alt","getGifs","categories","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2NAsCeA,EAnCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAoBrC,OACI,0BAAMC,SAZW,SAAAC,GAEjBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACrCN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SArBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,YCNlBG,EAAc,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEpC,OADAC,QAAQC,MAEJ,yBAAKC,UAAU,0CACX,yBAAKC,IAAKJ,EAAKK,IAAKN,IACpB,2BAAIA,K,uBCRHO,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbR,EADa,iDACmCS,UAAUF,GAD7C,+DAEAG,MAAMV,GAFN,cAEbW,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAM,CACFlB,GAAIkB,EAAIlB,GACRC,MAAOiB,EAAIjB,MACXC,IAAKgB,EAAIC,OAAOC,iBAAiBlB,QATtB,kBAcZc,GAdY,4CAAH,sDC4BLK,EAvBC,SAAC,GAAkB,IAAjBZ,EAAgB,EAAhBA,WAAgB,ECFN,SAACA,GAAgB,IAAD,EACdvB,mBAAS,CAC/B6B,KAAM,GACNO,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KA0BxC,OAlBAC,qBAAU,WACNjB,EAAQC,GAAYiB,MAAK,SAAAC,GAAI,OACrBH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAGtB,CAACb,IAWGc,EDtBwBK,CAAanB,GAAhCU,EAFkB,EAEvBJ,KAAaO,EAFU,EAEVA,QAMpB,OACI,oCACI,wBAAIjB,UAAU,qCAAqCI,GAClDa,GAAW,uBAAGjB,UAAU,oCAAb,cACZ,yBAAKA,UAAU,aACVc,EAAOF,KAAI,SAAAC,GAAG,OACX,kBAAC,EAAD,eACAW,IAAKX,EAAIlB,IACLkB,UEWTY,EA5BM,WAAM,MAEa5C,mBAAS,CAAC,aAFvB,mBAEhBuB,EAFgB,KAEJxB,EAFI,KAWvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACKwB,EAAWQ,KAAI,SAAAvB,GACZ,OAAO,kBAAC,EAAD,CAASmC,IAAKnC,EAAKe,WAAYf,UClB1DqC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.51227d30.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({setCategories}) => {\n    //el inputValue siempre sera el ultimo valor que escribio el usuario\n    const [inputValue, setInputValue] = useState('');\n    //para poder imprimir lo que se escribe con el teclado\n    const handleValueChange = (e) => {\n        //console.log(e.target.value);\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = e => {\n        //evita el recargo de la pagina por defecto cuando se da enter en el formulario\n        e.preventDefault();\n        //console.log(\"Submit Hecho\");\n        if(inputValue.trim().length > 2){\n            //el cat permite barrer o acceder a los valores dentro del state\n            setCategories(cat => [inputValue, ...cat]);\n            setInputValue('');\n        }\n    }\n    \n    return(\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleValueChange}\n            />\n        </form>\n    );\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;","import React from 'react';\nimport './../index.css';\n\nexport const GifGridItem = ({id, title, url}) => {\n    console.log();\n    return(\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    );\n};","export const getGifs = async(categories) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categories)}&limit=10&api_key=bl7Iwya9mLLDOBnrA3IAVBMLcdX3Po6K`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    //console.log(data);\n    const gifs = data.map(img => {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    });\n\n    //console.log(gifs);\n    return gifs;\n};","import React from 'react';\nimport {GifGridItem} from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n//import { getGifs } from '../helpers/getGifs';\n\nconst GifGrid = ({categories}) => {\n    // const [images, setImages] = useState([]);\n    const {data:images, loading} = useFetchGifs(categories);\n    //console.log(data, loading);\n    // //console.log(images);\n    \n    //getGifs();\n\n    return(\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{categories}</h3>\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n            <div className=\"card-grid\">\n                {images.map(img => \n                    <GifGridItem \n                    key={img.id}\n                    {...img}\n                    />)}\n            </div>\n        </>\n    ); \n};\n\nexport default GifGrid;","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (categories) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    //con el useEffect, el componente solo se renderiza una unica vez o cuando cambie categories\n    //los useEffect no pueden ser async\n    useEffect(() => {\n        getGifs(categories).then(imgs => \n                setState({\n                    data: imgs,\n                    loading: false\n                })\n        )\n    }, [categories]);\n    //console.log(state);\n\n\n    // setTimeout(() => {\n    //     setState({\n    //         data: [1,2,3,4,5,6,7],\n    //         loading: false\n    //     });\n    // }, 1000);\n\n    return state;\n};","import React, { useState } from 'react';\nimport AddCategory from './Components/AddCategory';\nimport GifGrid from './Components/GifGrid';\n\nconst GifExpertApp = () => {\n    //const categories = ['OnePunch', 'Samurai X', 'Naruto'];\n    const [categories, setCategories] = useState(['OnePunch']);\n    /*const handleAdd = () => {\n        //para actualizar el estado de un array, va entre corchetes\n        //setCategories([...categories,'Dragon ball Z']);\n        //o como un callback, que es muy util para la comunicacion entre componentes\n        //setCategories(cat => [...cat,'Dragon ball Z']);\n        //console.log(categories);\n    }*/\n\n    return(\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n            {/*<button onClick={handleAdd}>Agregar</button>*/}\n            <ol>\n                {categories.map(cat =>{\n                    return <GifGrid key={cat} categories={cat} />;\n                })}\n            </ol>\n        </>\n    );\n};\n\n\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GiftExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}